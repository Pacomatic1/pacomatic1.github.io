The goal: Instead of using separate HTML pages for everything, I want one master page that reads from separate files in order to easiuly keep consistent elements of the page. Kinda like a markdown static site generator, but it's a different format and it's 100% clientside.
Breaking news! This already exists and I just didn't know about it. It's called a single page application.
I want to do this using a custom XML parser that loads files using a query component at the end of the URL to signify what page we're on.
	Example: pacomatic1.github.io/?pagename=misc
	This means that we're going to be on index.html, and have a variable called pagemane be set to "misc".
	The function that runs when the page is loaded will then sned "misc" through a lookup table (contained in the HTML) to find the corresponding XML.
	Now that we know what file to look for, we parse the XML and create HTML based on it. Once that's done, inject it into a gigadiv's contents and have fun now.

Consider: You can make this with Javascript OR use Emscriptem with C++ to compile wasm.
	Although wasm will also make it load faster, the browser support will go to hell and the speed gain will be inconsequential at best. Plus, it means compiling stuff which makes this harder than it should be.
	Unless using C++ instead of Javascript is worth that much trouble, don't bother with wasm. You'll regret it.
_________________________________________________________________

// Comments start with '//'s. I'm using them here but to be fair they could probably be implemented in the parser too (technically ignored but you get it). They are single-line comments.
// You cannot have a comment on the same line as code;
// <p> text </p>
//	// Comment!
// Is valid, but
//	<p> text </p> // Comment!
// will be parsed as code and not considered a comment.


// In this XML, order of everything is VERY VERY important. DON'T FORGET THAT.
// Unless a tag specifically tells you that it's optional, don't skip it.
// Also this has the fun benefit or being a template. Kind of. Everything is put in order, so you can always refer to this.

<page_title>This is the name of the title for the tab. If this is blank, it runs on a fallback set by the HTML page.</page_title>
<favicon>Favicon override, which is a path to the favicon image WITHOUT QUOTATION MARKS. If this is blank, it runs on a fallback set by the HTML page.</favicon>

// All backgrounds have an image or video at the back and sometimes interactivity to go along with it.
// The background types are: image & video.
// image is a plain image. video is a plain video.
// I plan on adding more stuff, maybe cool effects or interactivity. I don't feel it right now though, so that's it for now.
<background_type>This is, in practice, an enumerator. Don't leave it empty, problems will occur.</background type>
<background_image>This is a path to the background image, WITHOUT QUOATION MARKS. If the type is video then this should point to a video.</background_image>

// The following tags apply to image and video. If any are skipped, they will have a default value... usually. These are also directly injected into CSS.
// Exmaple is the first one: background-repeat: [stuff]; [stuff] would be replaced with whatever's in these tags for their respective properties. Won't list them all, it's quite obvious innit?
<background_repeat>By default this is no-repeat</background_repeat>
<background_attachment>By default this is fixed</background_attachment>
// background-size can go multiple times while still having an effect, once for numbers and once for keywords. So we have two now. Yay.
<background_size_number>Numbers only! By default this is 100% 100%</background_size_number>
<background_size_keyword>Keywords only! By default this is cover</background_size_keyword>

<dont_include_footer/>
// This does what you think it does and is 100% optional. If you don't use it then the footer will be included. 

<page_body>

Alright! We're now in the hardest part: The actual page. You know, the reason we're here? The reason I'm doing any of this? Yeah, that!
This is basically a limited version of HTML; we don't include certain things because we don't want to include them, to make style consistent and whatnot.
I'm gonna do this by only having support for specific tags and specific attributes of said tags, as well as custom tags. Although you're able to use any HTML you want, the parser won't be programmed to handle it and can cause fatal errors.

Don't get it twisted: The double slash comment rule still applies.
All relative paths are not based on the location of your XML-style file but the HTML file. Remember that.
All tags support the class and id attributes. The style attrbute dies but you have <style> so no worries.
A piece of advice though: If your ids and classes happen to be similar to that of the HTML page (there is stuff happening separately from the parser, lest you forget) then there could be conflicts. How do we solve this? Well, everything in the master HTML page has a class or id that begins with 'master'. So don't reference anyting that has 'master' at the start and everything should be just fine. https://tenor.com/view/meme-clueless-gif-27097026
Everything's styling is based off what the gigadiv has. This is intentional, it's why any of this exists. As such, there is a new attribute to all the tags: ignore_default_styling. Adding this will override all of the gigadiv's styling, and make it do it's own thing. Don't assign a value, just include it. You need nothing more.
Same as usual: <br>, <i>, <b>, <s>.
<style> is exactly the same as before, with all the CSS you could want. Comments are still done with double slashes. I didn't put it up there because this is worth drawing attention to.
<script> is exactly the same as before, with all the Javascript you could want. I didn't put it up there because this is worth drawing attention to.
<a> is the same as before, but it only supports attributers href, target, and download.
<p> is the same, but margins have been shifted to a dedicated attribute because of convenience and the lack of inline styling. margin="[number]", [number] being what you would usually put in its respective css tag (including the units; px, em, cm, etc.).
<img> is the same but does not support the decode tag. It's set to async no matter what. 

</page_body>
